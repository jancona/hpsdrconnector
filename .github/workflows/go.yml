name: Go

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:

  build:
    name: Build
    runs-on: ubuntu-latest
    steps:

    - name: Set up Go 1.x
      uses: actions/setup-go@v2
      with:
        go-version: ^1.15

    - name: Check out code into the Go module directory
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Get dependencies
      run: |
        go get -v -t -d ./...

    - name: Test
      run: go test -v .

    - name: Build linux/amd64
      run: GOOS=linux GOARCH=amd64 go build -v -o hpsdrconnector_linux_amd64

    - name: Build windows
      run: GOOS=windows GOARCH=amd64 go build -v -o hpsdrconnector.exe

    - name: Build MacOS
      run: GOOS=darwin GOARCH=amd64 go build -v -o hpsdrconnector_macos_amd64

    - name: Build linux/arm
      run: GOOS=linux GOARCH=arm go build -v -o hpsdrconnector_linux_arm

    - id: new_version
      uses: paulhatch/semantic-version@v3
      with:
        branch: "master"
        tag_prefix: "v"
        # A string which, if present in a git commit, indicates that a change represents a
        # major (breaking) change
        major_pattern: "(MAJOR)"
        # Same as above except indicating a minor change
        minor_pattern: "(MINOR)"
        # A string to determine the format of the version output
        format: "${major}.${minor}.${patch}-prerelease.${increment}"
        # Optional path to check for changes. If any changes are detected in the path the
        # 'changed' output will true. Enter multiple paths separated by spaces.
        # change_path: "src/my-service"
        # Named version, will be used as suffix for name version tag
        # namespace: project-b

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.new_version.outputs.version }}
        release_name: Release ${{ steps.new_version.outputs.version }}
        draft: false
        prerelease: false

    - name: Upload Release Asset
      # id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
        asset_path: ./hpsdrconnector_linux_amd64
        asset_name: hpsdrconnector_linux_amd64
        asset_content_type: application/octet-stream
    - name: Upload Release Asset
      # id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
        asset_path: ./hpsdrconnector.exe
        asset_name: hpsdrconnector.exe
        asset_content_type: application/octet-stream
    - name: Upload Release Asset
      # id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
        asset_path: ./hpsdrconnector_macos_amd64
        asset_name: hpsdrconnector_macos_amd64
        asset_content_type: application/octet-stream
    - name: Upload Release Asset
      # id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
        asset_path: ./hpsdrconnector_linux_arm
        asset_name: hpsdrconnector_linux_arm
        asset_content_type: application/octet-stream
